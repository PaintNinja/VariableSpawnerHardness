plugins {
    id 'java'
    id 'groovy'
    id 'eclipse'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.groovymc.modsdotgroovy' version '1.4.3'
}

version = '1.21.5-1.4.5'
group = 'ga.ozli.minecraftmods.variablespawnerhardness'
base.archivesName = 'variablespawnerhardness'

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: '1.21.5'

    reobf = false

    runs {
        // applies to all run configs
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'

            mods {
                "${archivesBaseName}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', archivesBaseName
        }

        server {
            property 'forge.enabledGameTestNamespaces', archivesBaseName
            args '--nogui'
        }
    }
}

repositories {
    maven {
        name = 'Modding Inquisition Releases'
        url = 'https://maven.moddinginquisition.org/releases'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.21.5-55.0.3'
}

tasks.named('jar', Jar) {
    manifest {
        attributes([
            'Specification-Title': archivesBaseName,
            'Specification-Vendor': 'Paint_Ninja',
            'Specification-Version': '1', // We are version 1 of ourselves
            'Implementation-Title': archivesBaseName,
            'Implementation-Version': archiveVersion,
            'Implementation-Vendor' : 'Paint_Ninja',
        ])
    }

    reproducibleFileOrder = true
    preserveFileTimestamps = false
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

modsDotGroovy {
    dslVersion = '1.5.0'
}

// Merge the resources and classes into the same directory.
// This is done because java expects modules to be in a single directory.
// And if we have it in multiple we have to do performance intensive hacks like having the UnionFileSystem
// This will eventually be migrated to ForgeGradle so modders don't need to manually do it. But that is later.
sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}
