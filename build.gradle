import groovy.transform.CompileStatic
import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
	id 'java-library'
	id 'fabric-loom' version '1.10.+'
	id 'org.groovymc.modsdotgroovy' version '2.0.0-beta.32'
	id 'com.modrinth.minotaur' version '2.+'
	id 'net.darkhax.curseforgegradle' version '1.1.26'
}

base.archivesName = project.archives_base_name
version = project.mod_version
group = project.maven_group

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = project.java_version as int
}

java.toolchain.languageVersion = JavaLanguageVersion.of(project.java_version)

modsDotGroovy.gather {
	projectProperties(['loader_version', 'mod_version', 'mc_dep_version', 'java_version'])
}

modrinth {
	token = System.getenv('MODRINTH_TOKEN')
	projectId = 'variable-spawner-hardness'
	versionName = "${project.mod_version}-fabric"
	versionType = getReleaseType(project.mc_dep_version)
	uploadFile = tasks.named('remapJar')
}

tasks.named('modrinth') {
	dependsOn 'build'
}

tasks.register('curseforge', TaskPublishCurseForge) {
	dependsOn 'build'

	apiToken = System.getenv('CURSEFORGE_TOKEN')
	upload(400396, tasks.named('remapJar')).with {
		displayName = "${project.property('mod_version')}-fabric"
		changelog = ''

		addModLoader 'Fabric'

		final String mcDepVersion = project.property('mc_dep_version')
		final String releaseTypeStr = getReleaseType(mcDepVersion)
		releaseType = releaseTypeStr

		addGameVersion releaseTypeStr == 'release'
				? mcDepVersion
				: mcDepVersion.split('-', 2)[0] + '-snapshot'
	}
}

tasks.register('publishMod') {
	dependsOn 'curseforge', 'modrinth'
}

@CompileStatic
private static String getReleaseType(String mcDepVersion) {
	Objects.requireNonNull(mcDepVersion, 'mcDepVersion cannot be null')
	if (mcDepVersion.contains('-alpha')) {
		return 'alpha'
	} else if (mcDepVersion.contains('-beta') || mcDepVersion.contains('-rc')) {
		return 'beta'
	} else {
		return 'release'
	}
}
